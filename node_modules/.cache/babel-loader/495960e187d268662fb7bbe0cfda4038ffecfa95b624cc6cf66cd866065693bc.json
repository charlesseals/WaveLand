{"ast":null,"code":"var A = Object.defineProperty,\n  D = Object.defineProperties;\nvar G = Object.getOwnPropertyDescriptors;\nvar d = Object.getOwnPropertySymbols;\nvar k = Object.prototype.hasOwnProperty,\n  h = Object.prototype.propertyIsEnumerable;\nvar p = (r, e, o) => e in r ? A(r, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: o\n  }) : r[e] = o,\n  u = (r, e) => {\n    for (var o in e ||= {}) k.call(e, o) && p(r, o, e[o]);\n    if (d) for (var o of d(e)) h.call(e, o) && p(r, o, e[o]);\n    return r;\n  },\n  T = (r, e) => D(r, G(e));\nvar C = (r, e) => {\n  var o = {};\n  for (var i in r) k.call(r, i) && e.indexOf(i) < 0 && (o[i] = r[i]);\n  if (r != null && d) for (var i of d(r)) e.indexOf(i) < 0 && h.call(r, i) && (o[i] = r[i]);\n  return o;\n};\nimport * as a from \"react\";\nimport { useEffect as L, useRef as q, useState as B } from \"react\";\nimport { useRef as M } from \"react\";\nfunction g() {\n  let r = M(!0);\n  return r.current ? (r.current = !1, !0) : r.current;\n}\nimport { useEffect as _, useRef as K } from \"react\";\nfunction v(r) {\n  let e = K();\n  return _(() => {\n    e.current = r;\n  }), e.current;\n}\nfunction $(r, e) {\n  let o = g(),\n    i = v(r),\n    [f, c] = B(e),\n    n = q();\n  return L(() => {\n    r !== i && (c(0), n.current && clearTimeout(n.current), n.current = setTimeout(() => {\n      c(e), n.current = void 0;\n    }, e));\n  }, [r, i, e]), o ? 0 : f;\n}\nimport J from \"@emotion/styled\";\nimport { keyframes as S } from \"@emotion/react\";\nvar s = 350;\nfunction t(r) {\n  switch (r) {\n    case \"sm\":\n      return 1;\n    case \"md\":\n      return 1.5;\n    case \"lg\":\n      return 2;\n  }\n}\nvar U = r => S`\n  0% {\n    transform: rotate(30deg);\n  }\n\n  25% {\n    transform: rotate(30deg) translateX(${4.5 * t(r)}px) scaleX(1.1);\n  }\n\n  50% {\n    transform: rotate(30deg) translateX(${9 * t(r)}px);\n  }\n\n  100% {\n    transform: rotate(-30deg) translateX(${13.5 * t(r)}px) translateY(${8 * t(r)}px);\n  }\n`,\n  Y = r => S`\n  0% {\n    transform: rotate(-30deg) translateX(${13.5 * t(r)}px) translateY(${8 * t(r)}px);\n  }\n\n  50% {\n    transform: rotate(30deg) translateX(${9 * t(r)}px);\n  }\n\n  75% {\n    transform: rotate(30deg) translateX(${4.5 * t(r)}px) scaleX(1.1);\n  }\n\n  100% {\n    transform: rotate(30deg);\n  }\n`,\n  x = J.label`\n  position: relative;\n  display: block;\n  cursor: pointer;\n  -webkit-tap-highlight-color: transparent;\n\n  input {\n    position: absolute;\n    top: ${r => 1 * t(r.size)}px;\n    left: ${r => 1 * t(r.size)}px;\n    transition: border-width 50ms,\n      background-color ${s}ms;\n    appearance: none;\n    margin: 0;\n    box-shadow: 0 0 ${r => 2 * t(r.size)}px\n      ${r => 1 * t(r.size)}px\n      ${r => r.thumbShadowColor};\n    outline: none;\n    border: 0 solid ${r => r.thumbFocusRingColor};\n    border-radius: 50%;\n    width: ${r => 18 * t(r.size)}px;\n    height: ${r => 18 * t(r.size)}px;\n    background-color: ${r => r.inactiveThumbColor};\n    pointer-events: none;\n\n    & + svg {\n      display: block;\n      transition: fill ${s}ms,\n        stroke ${s}ms;\n      width: ${r => 36 * t(r.size)}px;\n      height: ${r => 25 * t(r.size)}px;\n      fill: ${r => r.inactiveTrackFillColor};\n      stroke: ${r => r.inactiveTrackStrokeColor};\n      stroke-linejoin: round;\n    }\n\n    &:checked {\n      animation-name: ${r => U(r.size)};\n      animation-timing-function: linear;\n      animation-fill-mode: forwards;\n      background-color: ${r => r.activeThumbColor};\n\n      & + svg {\n        fill: ${r => r.activeTrackFillColor};\n        stroke: ${r => r.activeTrackStrokeColor};\n      }\n    }\n\n    &:not(:checked) {\n      animation-name: ${r => Y(r.size)};\n      animation-timing-function: linear;\n      animation-fill-mode: backwards;\n    }\n\n    &:focus {\n      border-width: ${r => 1 * t(r.size)}px;\n    }\n\n    &:focus:not(:focus-visible) {\n      border-width: 0;\n    }\n\n    &:focus-visible {\n      border-width: ${r => 1 * t(r.size)}px;\n    }\n\n    &:invalid {\n      background-color: ${r => r.invalidThumbColor};\n\n      & + svg {\n        fill: ${r => r.invalidTrackFillColor};\n        stroke: ${r => r.invalidTrackStrokeColor};\n      }\n    }\n  }\n\n  &[data-disabled='true'] {\n    cursor: default;\n\n    input {\n      background-color: ${r => r.disabledThumbColor};\n\n      & + svg {\n        fill: ${r => r.disabledTrackFillColor};\n        stroke: ${r => r.disabledTrackStrokeColor};\n      }\n    }\n  }\n`;\nvar j = a.forwardRef((Z, E) => {\n  var m = Z,\n    {\n      size: r = \"sm\",\n      inactiveTrackFillColor: e = \"#ffffff\",\n      inactiveTrackStrokeColor: o = \"#d1d1d1\",\n      activeTrackFillColor: i = \"#ff708f\",\n      activeTrackStrokeColor: f = \"#ff4e74\",\n      disabledTrackFillColor: c = \"#f2f2f2\",\n      disabledTrackStrokeColor: n = \"#d1d1d1\",\n      invalidTrackFillColor: w = \"#ffffff\",\n      invalidTrackStrokeColor: y = \"#d1d1d1\",\n      inactiveThumbColor: F = \"#ffffff\",\n      activeThumbColor: z = \"#ffffff\",\n      disabledThumbColor: R = \"#ffffff\",\n      invalidThumbColor: I = \"#ffffff\",\n      thumbShadowColor: O = \"rgb(23 23 23 / 0.25)\",\n      thumbFocusRingColor: X = \"rgb(59 130 246 / 0.5)\",\n      title: P\n    } = m,\n    l = C(m, [\"size\", \"inactiveTrackFillColor\", \"inactiveTrackStrokeColor\", \"activeTrackFillColor\", \"activeTrackStrokeColor\", \"disabledTrackFillColor\", \"disabledTrackStrokeColor\", \"invalidTrackFillColor\", \"invalidTrackStrokeColor\", \"inactiveThumbColor\", \"activeThumbColor\", \"disabledThumbColor\", \"invalidThumbColor\", \"thumbShadowColor\", \"thumbFocusRingColor\", \"title\"]);\n  let H = $(r, s),\n    b = {\n      title: P,\n      \"data-disabled\": l.disabled || l[\"aria-disabled\"] === \"true\"\n    };\n  return !l.disabled && l[\"aria-disabled\"] === \"true\" && (b.onClick = N => {\n    N.preventDefault();\n  }), a.createElement(x, u({\n    size: r,\n    inactiveTrackFillColor: e,\n    inactiveTrackStrokeColor: o,\n    activeTrackFillColor: i,\n    activeTrackStrokeColor: f,\n    disabledTrackFillColor: c,\n    disabledTrackStrokeColor: n,\n    invalidTrackFillColor: w,\n    invalidTrackStrokeColor: y,\n    inactiveThumbColor: F,\n    activeThumbColor: z,\n    disabledThumbColor: R,\n    invalidThumbColor: I,\n    thumbShadowColor: O,\n    thumbFocusRingColor: X,\n    \"data-testid\": \"heart-switch\"\n  }, b), a.createElement(\"input\", T(u({\n    type: \"checkbox\",\n    role: \"switch\",\n    style: {\n      animationDuration: `${H}ms`\n    }\n  }, l), {\n    ref: E\n  })), a.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 33 23\",\n    \"aria-hidden\": \"true\"\n  }, a.createElement(\"path\", {\n    d: \"M23.5,0.5 C28.4705627,0.5 32.5,4.52943725 32.5,9.5 C32.5,16.9484448 21.46672,22.5 16.5,22.5 C11.53328,22.5 0.5,16.9484448 0.5,9.5 C0.5,4.52952206 4.52943725,0.5 9.5,0.5 C12.3277083,0.5 14.8508336,1.80407476 16.5007741,3.84362242 C18.1491664,1.80407476 20.6722917,0.5 23.5,0.5 Z\"\n  })));\n});\nj.displayName = \"HeartSwitch\";\nexport { j as HeartSwitch };","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","useState","useFirstMountState","isFirst","current","usePrevious","state","ref","useAnimationDuration","defaultAnimationDurationInMs","isFirstMount","previousState","animationDuration","setAnimationDuration","timeoutId","clearTimeout","setTimeout","styled","keyframes","TOGGLE_ANIMATION_DURATION","sizeToScale","size","check","uncheck","StyledHeartSwitch","label","props","thumbShadowColor","thumbFocusRingColor","inactiveThumbColor","inactiveTrackFillColor","inactiveTrackStrokeColor","activeThumbColor","activeTrackFillColor","activeTrackStrokeColor","invalidThumbColor","invalidTrackFillColor","invalidTrackStrokeColor","disabledThumbColor","disabledTrackFillColor","disabledTrackStrokeColor","HeartSwitch","a","_a","title","_b","inputProps","labelProps","disabled","onClick","event","preventDefault","type","role","style","xmlns","viewBox","d","displayName"],"sources":["/Users/charlesseals/workspace/node_modules/@anatoliygatt/heart-switch/src/HeartSwitch.tsx","/Users/charlesseals/workspace/node_modules/@anatoliygatt/heart-switch/src/hooks/useAnimationDuration.ts","/Users/charlesseals/workspace/node_modules/@anatoliygatt/heart-switch/src/hooks/useFirstMountState.ts","/Users/charlesseals/workspace/node_modules/@anatoliygatt/heart-switch/src/hooks/usePrevious.ts","/Users/charlesseals/workspace/node_modules/@anatoliygatt/heart-switch/src/style.ts"],"sourcesContent":["import * as React from 'react';\nimport { useAnimationDuration } from './hooks/useAnimationDuration';\nimport { TOGGLE_ANIMATION_DURATION, StyledHeartSwitch } from './style';\n\nexport type Size = 'sm' | 'md' | 'lg';\n\nexport interface OwnProps {\n  size?: Size;\n  inactiveTrackFillColor?: string;\n  inactiveTrackStrokeColor?: string;\n  activeTrackFillColor?: string;\n  activeTrackStrokeColor?: string;\n  disabledTrackFillColor?: string;\n  disabledTrackStrokeColor?: string;\n  invalidTrackFillColor?: string;\n  invalidTrackStrokeColor?: string;\n  inactiveThumbColor?: string;\n  activeThumbColor?: string;\n  disabledThumbColor?: string;\n  invalidThumbColor?: string;\n  thumbShadowColor?: string;\n  thumbFocusRingColor?: string;\n}\n\nexport type InputProps = Pick<\n  JSX.IntrinsicElements['input'],\n  | 'autoFocus'\n  | 'checked'\n  | 'defaultChecked'\n  | 'disabled'\n  | 'form'\n  | 'name'\n  | 'required'\n  | 'value'\n  | 'id'\n  | 'title'\n  | 'tabIndex'\n  | 'aria-disabled'\n  | 'aria-label'\n  | 'aria-describedby'\n  | 'aria-labelledby'\n  | 'onBlur'\n  | 'onChange'\n  | 'onFocus'\n  | 'onInvalid'\n>;\n\nexport type Props = OwnProps & InputProps;\n\nexport const HeartSwitch = React.forwardRef<HTMLInputElement, Props>(\n  (\n    {\n      size = 'sm',\n      inactiveTrackFillColor = '#ffffff',\n      inactiveTrackStrokeColor = '#d1d1d1',\n      activeTrackFillColor = '#ff708f',\n      activeTrackStrokeColor = '#ff4e74',\n      disabledTrackFillColor = '#f2f2f2',\n      disabledTrackStrokeColor = '#d1d1d1',\n      invalidTrackFillColor = '#ffffff',\n      invalidTrackStrokeColor = '#d1d1d1',\n      inactiveThumbColor = '#ffffff',\n      activeThumbColor = '#ffffff',\n      disabledThumbColor = '#ffffff',\n      invalidThumbColor = '#ffffff',\n      thumbShadowColor = 'rgb(23 23 23 / 0.25)',\n      thumbFocusRingColor = 'rgb(59 130 246 / 0.5)',\n      title,\n      ...inputProps\n    },\n    ref\n  ) => {\n    const animationDuration = useAnimationDuration(\n      size,\n      TOGGLE_ANIMATION_DURATION\n    );\n\n    const labelProps: Pick<\n      JSX.IntrinsicElements['label'],\n      'title' | 'onClick'\n    > & {\n      'data-disabled': boolean;\n    } = {\n      title,\n      'data-disabled':\n        inputProps.disabled || inputProps['aria-disabled'] === 'true',\n    };\n\n    if (!inputProps.disabled && inputProps['aria-disabled'] === 'true') {\n      labelProps.onClick = (event) => {\n        event.preventDefault();\n      };\n    }\n\n    return (\n      <StyledHeartSwitch\n        size={size}\n        inactiveTrackFillColor={inactiveTrackFillColor}\n        inactiveTrackStrokeColor={inactiveTrackStrokeColor}\n        activeTrackFillColor={activeTrackFillColor}\n        activeTrackStrokeColor={activeTrackStrokeColor}\n        disabledTrackFillColor={disabledTrackFillColor}\n        disabledTrackStrokeColor={disabledTrackStrokeColor}\n        invalidTrackFillColor={invalidTrackFillColor}\n        invalidTrackStrokeColor={invalidTrackStrokeColor}\n        inactiveThumbColor={inactiveThumbColor}\n        activeThumbColor={activeThumbColor}\n        disabledThumbColor={disabledThumbColor}\n        invalidThumbColor={invalidThumbColor}\n        thumbShadowColor={thumbShadowColor}\n        thumbFocusRingColor={thumbFocusRingColor}\n        data-testid=\"heart-switch\"\n        {...labelProps}\n      >\n        <input\n          type=\"checkbox\"\n          role=\"switch\"\n          style={{ animationDuration: `${animationDuration}ms` }}\n          {...inputProps}\n          ref={ref}\n        />\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 33 23\"\n          aria-hidden=\"true\"\n        >\n          <path d=\"M23.5,0.5 C28.4705627,0.5 32.5,4.52943725 32.5,9.5 C32.5,16.9484448 21.46672,22.5 16.5,22.5 C11.53328,22.5 0.5,16.9484448 0.5,9.5 C0.5,4.52952206 4.52943725,0.5 9.5,0.5 C12.3277083,0.5 14.8508336,1.80407476 16.5007741,3.84362242 C18.1491664,1.80407476 20.6722917,0.5 23.5,0.5 Z\" />\n        </svg>\n      </StyledHeartSwitch>\n    );\n  }\n);\n\nHeartSwitch.displayName = 'HeartSwitch';\n","import { useEffect, useRef, useState } from 'react';\nimport { useFirstMountState } from './useFirstMountState';\nimport { usePrevious } from './usePrevious';\n\nexport function useAnimationDuration<T>(\n  state: T,\n  defaultAnimationDurationInMs: number\n): number {\n  const isFirstMount = useFirstMountState();\n  const previousState = usePrevious(state);\n  const [animationDuration, setAnimationDuration] = useState<number>(\n    defaultAnimationDurationInMs\n  );\n  const timeoutId = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (state !== previousState) {\n      setAnimationDuration(0);\n      if (timeoutId.current) {\n        clearTimeout(timeoutId.current);\n      }\n      timeoutId.current = setTimeout(() => {\n        setAnimationDuration(defaultAnimationDurationInMs);\n        timeoutId.current = undefined;\n      }, defaultAnimationDurationInMs);\n    }\n  }, [state, previousState, defaultAnimationDurationInMs]);\n\n  if (isFirstMount) {\n    return 0;\n  }\n  return animationDuration;\n}\n","import { useRef } from 'react';\n\nexport function useFirstMountState(): boolean {\n  const isFirst = useRef(true);\n\n  if (isFirst.current) {\n    isFirst.current = false;\n    return true;\n  }\n\n  return isFirst.current;\n}\n","import { useEffect, useRef } from 'react';\n\nexport function usePrevious<T>(state: T): T | undefined {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = state;\n  });\n\n  return ref.current;\n}\n","import styled from '@emotion/styled';\nimport { keyframes } from '@emotion/react';\nimport type { Keyframes } from '@emotion/react';\nimport type { Size, OwnProps } from './HeartSwitch';\n\nexport const TOGGLE_ANIMATION_DURATION = 350;\n\nfunction sizeToScale(size: Size): number {\n  switch (size) {\n    case 'sm':\n      return 1;\n    case 'md':\n      return 1.5;\n    case 'lg':\n      return 2;\n  }\n}\n\nconst check = (size: Size): Keyframes => keyframes`\n  0% {\n    transform: rotate(30deg);\n  }\n\n  25% {\n    transform: rotate(30deg) translateX(${\n      4.5 * sizeToScale(size)\n    }px) scaleX(1.1);\n  }\n\n  50% {\n    transform: rotate(30deg) translateX(${9 * sizeToScale(size)}px);\n  }\n\n  100% {\n    transform: rotate(-30deg) translateX(${\n      13.5 * sizeToScale(size)\n    }px) translateY(${8 * sizeToScale(size)}px);\n  }\n`;\n\nconst uncheck = (size: Size): Keyframes => keyframes`\n  0% {\n    transform: rotate(-30deg) translateX(${\n      13.5 * sizeToScale(size)\n    }px) translateY(${8 * sizeToScale(size)}px);\n  }\n\n  50% {\n    transform: rotate(30deg) translateX(${9 * sizeToScale(size)}px);\n  }\n\n  75% {\n    transform: rotate(30deg) translateX(${\n      4.5 * sizeToScale(size)\n    }px) scaleX(1.1);\n  }\n\n  100% {\n    transform: rotate(30deg);\n  }\n`;\n\nexport const StyledHeartSwitch = styled.label<Required<OwnProps>>`\n  position: relative;\n  display: block;\n  cursor: pointer;\n  -webkit-tap-highlight-color: transparent;\n\n  input {\n    position: absolute;\n    top: ${(props) => 1 * sizeToScale(props.size)}px;\n    left: ${(props) => 1 * sizeToScale(props.size)}px;\n    transition: border-width 50ms,\n      background-color ${TOGGLE_ANIMATION_DURATION}ms;\n    appearance: none;\n    margin: 0;\n    box-shadow: 0 0 ${(props) => 2 * sizeToScale(props.size)}px\n      ${(props) => 1 * sizeToScale(props.size)}px\n      ${(props) => props.thumbShadowColor};\n    outline: none;\n    border: 0 solid ${(props) => props.thumbFocusRingColor};\n    border-radius: 50%;\n    width: ${(props) => 18 * sizeToScale(props.size)}px;\n    height: ${(props) => 18 * sizeToScale(props.size)}px;\n    background-color: ${(props) => props.inactiveThumbColor};\n    pointer-events: none;\n\n    & + svg {\n      display: block;\n      transition: fill ${TOGGLE_ANIMATION_DURATION}ms,\n        stroke ${TOGGLE_ANIMATION_DURATION}ms;\n      width: ${(props) => 36 * sizeToScale(props.size)}px;\n      height: ${(props) => 25 * sizeToScale(props.size)}px;\n      fill: ${(props) => props.inactiveTrackFillColor};\n      stroke: ${(props) => props.inactiveTrackStrokeColor};\n      stroke-linejoin: round;\n    }\n\n    &:checked {\n      animation-name: ${(props) => check(props.size)};\n      animation-timing-function: linear;\n      animation-fill-mode: forwards;\n      background-color: ${(props) => props.activeThumbColor};\n\n      & + svg {\n        fill: ${(props) => props.activeTrackFillColor};\n        stroke: ${(props) => props.activeTrackStrokeColor};\n      }\n    }\n\n    &:not(:checked) {\n      animation-name: ${(props) => uncheck(props.size)};\n      animation-timing-function: linear;\n      animation-fill-mode: backwards;\n    }\n\n    &:focus {\n      border-width: ${(props) => 1 * sizeToScale(props.size)}px;\n    }\n\n    &:focus:not(:focus-visible) {\n      border-width: 0;\n    }\n\n    &:focus-visible {\n      border-width: ${(props) => 1 * sizeToScale(props.size)}px;\n    }\n\n    &:invalid {\n      background-color: ${(props) => props.invalidThumbColor};\n\n      & + svg {\n        fill: ${(props) => props.invalidTrackFillColor};\n        stroke: ${(props) => props.invalidTrackStrokeColor};\n      }\n    }\n  }\n\n  &[data-disabled='true'] {\n    cursor: default;\n\n    input {\n      background-color: ${(props) => props.disabledThumbColor};\n\n      & + svg {\n        fill: ${(props) => props.disabledTrackFillColor};\n        stroke: ${(props) => props.disabledTrackStrokeColor};\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}