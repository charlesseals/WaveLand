{"ast":null,"code":"var _jsxFileName = \"/Users/charlesseals/workspace/WaveLand/waveland-capstone/src/components/artists/ArtistList.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Tickets.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ArtistList = _ref => {\n  _s();\n  let {\n    searchTermState\n  } = _ref;\n  const [artists, setArtists] = useState([]);\n  const [filteredArtists, setFiltered] = useState([]);\n  const [emergency, setEmergency] = useState(false);\n  const [openOnly, updateOpenOnly] = useState(false);\n  const navigate = useNavigate();\n  const localWavelandUser = localStorage.getItem(\"waveland_user\");\n  const wavelandUserObject = JSON.parse(localWavelandUser);\n  useEffect(() => {\n    const searchedArtists = Artists.filter(Artist => {\n      return Artist.description.toLowerCase().startsWith(searchTermState.toLowerCase());\n    });\n    setFiltered(searchedArtists);\n  }, [searchTermState]);\n  useEffect(() => {\n    if (emergency) {\n      const emergencyArtists = Artists.filter(Artist => Artist.emergency === true);\n      setFiltered(emergencyArtists);\n    } else {\n      setFiltered(Artists);\n    }\n  }, [emergency]);\n  useEffect(() => {\n    fetch(`http://localhost:8088/artists`).then(res => res.json()).then(ArtistArray => {\n      setArtists(ArtistArray);\n    });\n  }, [] // When this array is empty, you are observing initial component state\n  );\n\n  useEffect(() => {\n    if (wavelandUserObject.staff) {\n      // For Employees\n      setFiltered(Artists);\n    } else {\n      // For Customers\n      const myArtists = Artists.filter(Artist => Artist.userId === wavelandUserObject.id);\n      setFiltered(myArtists);\n    }\n  }, [Artists]);\n  useEffect(() => {\n    if (openOnly) {\n      const openArtistArray = Artists.filter(Artist => {\n        return Artist.userId === wavelandUserObject.id && Artist.dateCompleted === \"\";\n      });\n      setFiltered(openArtistArray);\n    } else {\n      const myArtists = Artists.filter(Artist => Artist.userId === wavelandUserObject.id);\n      setFiltered(myArtists);\n    }\n  }, [openOnly]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [wavelandUserObject.staff ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setEmergency(true);\n        },\n        children: \"Emergency Only\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setEmergency(false);\n        },\n        children: \"Show All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate(\"/Artist/create\"),\n        children: \"Create Artist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateOpenOnly(true),\n        children: \"Open Artist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateOpenOnly(false),\n        children: \"All My Artists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"List of Artists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      className: \"Artists\",\n      children: filteredArtists.map(Artist => {\n        return /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"Artist\",\n          children: [/*#__PURE__*/_jsxDEV(\"header\", {\n            children: Artist.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n            children: [\"Emergency: \", Artist.emergency ? \"ðŸ§¨\" : \"No\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this)]\n        }, `Artist--${Artist.id}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 32\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(ArtistList, \"H2BHdsPIVh8KyY7waPA6FKjje3Y=\", false, function () {\n  return [useNavigate];\n});\n_c = ArtistList;\nvar _c;\n$RefreshReg$(_c, \"ArtistList\");","map":{"version":3,"names":["useEffect","useState","useNavigate","ArtistList","searchTermState","artists","setArtists","filteredArtists","setFiltered","emergency","setEmergency","openOnly","updateOpenOnly","navigate","localWavelandUser","localStorage","getItem","wavelandUserObject","JSON","parse","searchedArtists","Artists","filter","Artist","description","toLowerCase","startsWith","emergencyArtists","fetch","then","res","json","ArtistArray","staff","myArtists","userId","id","openArtistArray","dateCompleted","map"],"sources":["/Users/charlesseals/workspace/WaveLand/waveland-capstone/src/components/artists/ArtistList.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport \"./Tickets.css\"\n\nexport const ArtistList = ({ searchTermState }) => {\n    const [artists, setArtists] = useState([])\n    const [filteredArtists, setFiltered] = useState([])\n    const [emergency, setEmergency] = useState(false)\n    const [openOnly, updateOpenOnly] = useState(false)\n    const navigate = useNavigate()\n\n    const localWavelandUser = localStorage.getItem(\"waveland_user\")\n    const wavelandUserObject = JSON.parse(localWavelandUser)\n\n    useEffect(\n        () => {\n            const searchedArtists = Artists.filter(Artist => {\n                return Artist.description.toLowerCase().startsWith(searchTermState.toLowerCase())\n            })\n            setFiltered(searchedArtists)\n        },\n        [ searchTermState ]\n    )\n\n    useEffect(\n        () => {\n            if (emergency) {\n                const emergencyArtists = Artists.filter(Artist => Artist.emergency === true)\n                setFiltered(emergencyArtists)\n            }\n            else {\n                setFiltered(Artists\n                )\n            }\n        },\n        [emergency]\n    )\n\n    useEffect(\n        () => {\n            fetch(`http://localhost:8088/artists`)\n            .then(res => res.json())\n            .then((ArtistArray) => {\n                setArtists(ArtistArray)\n            })\n        },\n        [] // When this array is empty, you are observing initial component state\n    )\n\n    useEffect(\n        () => {\n            if (wavelandUserObject.staff) {\n                // For Employees\n                setFiltered(Artists)\n            }\n            else {\n                // For Customers\n                const myArtists = Artists.filter(Artist => Artist.userId === wavelandUserObject.id)\n                setFiltered(myArtists)\n            }\n        },\n        [Artists]\n    )\n\n    useEffect(\n        () => {\n            if (openOnly) {\n            const openArtistArray = Artists.filter(Artist => {\n                return Artist.userId === wavelandUserObject.id && Artist.dateCompleted === \"\"\n            })\n            setFiltered(openArtistArray)\n        }\n        else {\n            const myArtists = Artists.filter(Artist => Artist.userId === wavelandUserObject.id)\n            setFiltered(myArtists)\n        }\n        },\n        [ openOnly ]\n    )\n\n\n    return <>\n    {\n        wavelandUserObject.staff\n        ? <>\n            <button onClick={ () => { setEmergency(true) } }>Emergency Only</button>\n            <button onClick={ () => { setEmergency(false) } }>Show All</button>\n        </>\n        : <>\n            <button onClick={() => navigate(\"/Artist/create\")}>Create Artist</button>\n            <button onClick={() => updateOpenOnly(true)}>Open Artist</button>\n            <button onClick={() => updateOpenOnly(false)}>All My Artists</button>\n        </>\n    }\n\n        <h2>List of Artists</h2>\n\n        <article className=\"Artists\">\n            {\n                filteredArtists.map(\n                    (Artist) => {\n                        return <section className=\"Artist\" key={`Artist--${Artist.id}`}>\n                            <header>{Artist.description}</header>\n                            <footer>Emergency: {Artist.emergency ? \"ðŸ§¨\" : \"No\"}</footer>\n                        </section>\n                    }\n                )\n            }\n        </article>\n    </>\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}