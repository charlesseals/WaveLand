{"ast":null,"code":"var _jsxFileName = \"/Users/charlesseals/workspace/WaveLand/waveland-capstone/src/components/artists/ArtistList.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Artists.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ArtistList = _ref => {\n  _s();\n  let {\n    searchTermState\n  } = _ref;\n  const [artists, setArtists] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [filteredArtists, setFiltered] = useState([]);\n  const [favorites, setFavorites] = useState({});\n  const navigate = useNavigate();\n  const localWavelandUser = localStorage.getItem(\"waveland_user\");\n  const wavelandUserObject = JSON.parse(localWavelandUser);\n  useEffect(() => {\n    fetch(`http://localhost:8088/artists?_expand=country`).then(res => res.json()).then(artistArray => {\n      setArtists(artistArray);\n      setFiltered(artistArray);\n    });\n  }, []);\n  useEffect(() => {\n    fetch(`http://localhost:8088/countries`).then(res => res.json()).then(countriesArray => {\n      setCountries(countriesArray);\n    });\n  }, []);\n  useEffect(() => {\n    const searchedArtists = artists.filter(artist => {\n      var _artist$country;\n      return artist === null || artist === void 0 ? void 0 : (_artist$country = artist.country) === null || _artist$country === void 0 ? void 0 : _artist$country.name.toLowerCase().startsWith(searchTermState.toLowerCase());\n    });\n    setFiltered(searchedArtists);\n  }, [searchTermState]);\n  useEffect(() => {\n    fetch(`http://localhost:8088/favorites?`).then(res => res.json()).then(favoritesArray => {\n      // const singleFavoriteArtist = favoritesArray[0]\n      setFavorites(favoritesArray);\n    });\n  }, []);\n  const handleFavoriteButton = (event, artistObj) => {\n    event.preventDefault();\n    // favorites.map((favorite) => {\n    if (artistObj.id === favorites.artistId) {\n      console.log(\"Artist already in Favorite List\");\n    } else {\n      console.log(\"Favorite Artist Added\");\n      // TODO: Create the object to be saved to the API\n      const newFavorite = {\n        userId: wavelandUserObject.id,\n        artistId: artistObj.id\n      };\n      fetch(`http://localhost:8088/favorites`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(newFavorite)\n      }).then(res => res.json()).then(() => {\n        navigate(\"/favorites\");\n      });\n    }\n    // }\n    // )\n  };\n\n  //     useEffect(\n  //         () => {\n  //             fetch(`http://localhost:8088/favorites?artistId=${artists.id}`)\n  //             .then(res => res.json())\n  //             .then((favoritesArray) => {\n  //                 const singleFavoriteArtist = favoritesArray[0]\n  //                 setFavorites(singleFavoriteArtist)\n  //             })\n  //         },\n  //         []\n  //         )\n\n  // const handleFavoriteButton = (event, artistObj) => {\n  //     event.preventDefault()\n  //         // favorites.map((favorite) => {\n  //             if (artistObj.id === favorites.artistId) {\n  //                 console.log(\"Artist already in Favorite List\")\n  //             } else {\n  //                 console.log(\"Favorite Artist Added\")\n  //                 // TODO: Create the object to be saved to the API\n  //                 const newFavorite = {\n  //                     userId: wavelandUserObject.id,\n  //                     artistId: artistObj.id\n  //                 }\n  //                 fetch(`http://localhost:8088/favorites`, {\n  //                     method: \"POST\",\n  //                     headers: {\n  //                         \"Content-Type\": \"application/json\"\n  //                     },\n  //                     body: JSON.stringify(newFavorite)\n  //                 })\n  //                 .then(res => res.json())\n  //                 .then(() => {\n  //                     navigate(\"/favorites\")\n  //                 }\n  //                 )\n  //             }\n  //         // }\n  //         // )\n  // }\n\n  // TODO: Perform the fetch() to POST the object to the API\n  // useEffect(\n  // () => {\n  //     filteredArtists.map(\n  //         (filteredArtist) => {\n  //             if (artistObj.id !== artist.id) {\n  //             }\n  //         }   \n  //     ),\n  //     []\n  // }\n  // )\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"List of Artists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      className: \"artists\",\n      children: filteredArtists.map(artist => {\n        return /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"artist\",\n          children: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"image\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: artist.image,\n                alt: \"image\",\n                width: 300,\n                height: 300\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: artist.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"favorites\",\n              onClick: event => {\n                handleFavoriteButton(event, artist);\n              },\n              children: \"Favorite\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: countries.map(country => {\n                if (artist.countryId === country.id) {\n                  return country.name;\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true)\n        }, `Artist--${artist.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 44\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true);\n};\n_s(ArtistList, \"dHpH7IbKhNMSwPUgX6rdJkrS3L4=\", false, function () {\n  return [useNavigate];\n});\n_c = ArtistList;\nvar _c;\n$RefreshReg$(_c, \"ArtistList\");","map":{"version":3,"names":["useEffect","useState","useNavigate","ArtistList","searchTermState","artists","setArtists","countries","setCountries","filteredArtists","setFiltered","favorites","setFavorites","navigate","localWavelandUser","localStorage","getItem","wavelandUserObject","JSON","parse","fetch","then","res","json","artistArray","countriesArray","searchedArtists","filter","artist","country","name","toLowerCase","startsWith","favoritesArray","handleFavoriteButton","event","artistObj","preventDefault","id","artistId","console","log","newFavorite","userId","method","headers","body","stringify","map","image","countryId"],"sources":["/Users/charlesseals/workspace/WaveLand/waveland-capstone/src/components/artists/ArtistList.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport \"./Artists.css\"\n\nexport const ArtistList = ({searchTermState}) => {\n    const [artists, setArtists] = useState([])\n    const [countries, setCountries] = useState([])\n    const [filteredArtists, setFiltered] = useState([])\n    const [favorites, setFavorites] = useState({})\n\n    \n    const navigate = useNavigate()\n    \n    const localWavelandUser = localStorage.getItem(\"waveland_user\")\n    const wavelandUserObject = JSON.parse(localWavelandUser)\n\n    useEffect(\n        () => {\n            fetch(`http://localhost:8088/artists?_expand=country`)\n            .then(res => res.json())\n            .then((artistArray) => {\n                setArtists(artistArray)\n                setFiltered(artistArray)\n            })\n        },\n        []\n        )\n    useEffect(\n        () => {\n            fetch(`http://localhost:8088/countries`)\n            .then(res => res.json())\n            .then((countriesArray) => {\n                setCountries(countriesArray)\n            })\n        },\n        []\n        )\n\n    useEffect(\n        \n        () => {\n            const searchedArtists = artists.filter(artist => {\n                return artist?.country?.name.toLowerCase().startsWith(searchTermState.toLowerCase())\n            })\n            setFiltered(searchedArtists)\n        },\n        [ searchTermState ]\n    )\n\n\n    useEffect(\n        () => {\n            fetch(`http://localhost:8088/favorites?`)\n            .then(res => res.json())\n            .then((favoritesArray) => {\n                // const singleFavoriteArtist = favoritesArray[0]\n                setFavorites(favoritesArray)\n            })\n        },\n        []\n        )\n\n        \n\nconst handleFavoriteButton = (event, artistObj) => {\n    event.preventDefault()\n        // favorites.map((favorite) => {\n            if (artistObj.id === favorites.artistId) {\n                console.log(\"Artist already in Favorite List\")\n            } else {\n                console.log(\"Favorite Artist Added\")\n                // TODO: Create the object to be saved to the API\n                const newFavorite = {\n                    userId: wavelandUserObject.id,\n                    artistId: artistObj.id\n                }\n                fetch(`http://localhost:8088/favorites`, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(newFavorite)\n                })\n                .then(res => res.json())\n                .then(() => {\n                    navigate(\"/favorites\")\n                }\n                )\n            }\n        // }\n        // )\n}\n\n\n//     useEffect(\n//         () => {\n//             fetch(`http://localhost:8088/favorites?artistId=${artists.id}`)\n//             .then(res => res.json())\n//             .then((favoritesArray) => {\n//                 const singleFavoriteArtist = favoritesArray[0]\n//                 setFavorites(singleFavoriteArtist)\n//             })\n//         },\n//         []\n//         )\n\n        \n\n// const handleFavoriteButton = (event, artistObj) => {\n//     event.preventDefault()\n//         // favorites.map((favorite) => {\n//             if (artistObj.id === favorites.artistId) {\n//                 console.log(\"Artist already in Favorite List\")\n//             } else {\n//                 console.log(\"Favorite Artist Added\")\n//                 // TODO: Create the object to be saved to the API\n//                 const newFavorite = {\n//                     userId: wavelandUserObject.id,\n//                     artistId: artistObj.id\n//                 }\n//                 fetch(`http://localhost:8088/favorites`, {\n//                     method: \"POST\",\n//                     headers: {\n//                         \"Content-Type\": \"application/json\"\n//                     },\n//                     body: JSON.stringify(newFavorite)\n//                 })\n//                 .then(res => res.json())\n//                 .then(() => {\n//                     navigate(\"/favorites\")\n//                 }\n//                 )\n//             }\n//         // }\n//         // )\n// }\n    \n        \n\n    // TODO: Perform the fetch() to POST the object to the API\n    // useEffect(\n        // () => {\n        //     filteredArtists.map(\n        //         (filteredArtist) => {\n        //             if (artistObj.id !== artist.id) {\n        //             }\n        //         }   \n        //     ),\n        //     []\n        // }\n    // )\n\n\n                return <>\n                \n            \n                    <h2>List of Artists</h2>\n            \n                    <article className=\"artists\">\n                        {\n                            filteredArtists.map(\n\n                                (artist) => {\n                                    return <section className=\"artist\" key={`Artist--${artist.id}`}>\n                                        <>\n                                            <div className=\"image\">                                   \n                                                <img src={artist.image} alt=\"image\" width={300} height={300}/>\n                                            </div>\n                                            <h2>{artist.name}</h2>\n                                            <button className=\"favorites\" onClick={(event) => {\n                                                \n                                                handleFavoriteButton(event, artist)\n                                            }}>Favorite</button>\n                                            {/* <div>{ArtistForm}</div> */}\n                                            \n                                            <h4>{\n                                                countries.map(\n                                                    (country) => {\n                                                        if (artist.countryId === country.id) {\n                                                            return country.name\n                                                        }\n                                                    }\n                                                )\n                                                }</h4>\n                                        </>\n                                    </section>\n                                }\n                            )\n                        }\n                    </article>\n            \n                </>\n            }\n            \n\n        \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}